import os
import re
import math
import cantools
import pandas as pd
import csv
from collections import OrderedDict
from tqdm import tqdm
from tkinter import Tk, filedialog

# ---------------------- TRC MERGE & INFO EXTRACTION ---------------------- #
def extract_trc_info(filepath):
    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
        lines = f.readlines()

    file_version = None
    start_timestamp = None
    start_time_str = None
    header = []
    messages = []
    in_header = True

    for line in lines:
        if line.startswith(";$FILEVERSION="):
            file_version = line.split("=")[1].strip()
        elif line.startswith(";$STARTTIME="):
            try:
                start_timestamp = float(line.split("=")[1].strip())
            except ValueError:
                pass
        elif line.strip().startswith(";   Start time:"):
            start_time_str = line.strip().split(": ", 1)[1].strip()

        if in_header:
            header.append(line)
            if line.strip().startswith(";---+"):
                in_header = False
        else:
            messages.append(line)

    if not file_version or start_timestamp is None:
        raise ValueError(f"Missing version or start time in: {filepath}")

    return {
        "file": filepath,
        "filename": os.path.basename(filepath),
        "version": file_version,
        "start_timestamp": start_timestamp,
        "start_time_str": start_time_str,
        "header": header,
        "messages": messages
    }


def merge_in_forced_order(trc_files):
    if len(trc_files) == 1:
        print("✅ Single TRC file provided. Skipping merge.")
        return trc_files[0]

    file_infos = [extract_trc_info(f) for f in trc_files]
    versions = set(info["version"] for info in file_infos)
    if len(versions) > 1:
        raise ValueError("❌ Cannot merge mixed TRC versions. Ensure all are version 1.1 or 2.0.")

    file_infos.sort(key=lambda x: x["start_timestamp"])
    print("\n🕒 File Start Times (merge will follow this order):")
    for info in file_infos:
        print(f"- {info['filename']:20} → $STARTTIME = {info['start_timestamp']} → {info['start_time_str']}")

    primary_info = file_infos[0]
    primary_header = primary_info["header"]
    primary_start_timestamp = primary_info["start_timestamp"]
    primary_start_time_str = primary_info["start_time_str"]

    final_lines = []
    line_counter = 1
    global_start_time = primary_start_timestamp

    for info in file_infos:
        matched = 0
        for line in info["messages"]:
            match = re.search(
                r'^\s*\d+\)\s+([\d.]+)\s+(Rx|Tx)\s+([0-9A-Fa-f]+)\s+\d+\s+((?:[0-9A-Fa-f]{2}\s*)+)',
                line
            )
            if match:
                offset_ms = float(match.group(1))
                abs_time = info["start_timestamp"] + (offset_ms / 1000.0)
                new_offset_ms = (abs_time - global_start_time) * 1000
                new_offset_str = f"{new_offset_ms:10.1f}"
                new_line = re.sub(r'^\s*\d+\)\s+[\d.]+', f"{line_counter:6d}){new_offset_str}", line.strip())
                final_lines.append(new_line)
                line_counter += 1
                matched += 1
        print(f"✅ {info['filename']} — matched {matched} of {len(info['messages'])} lines")

    if not final_lines:
        raise ValueError("❌ Merge failed: No TRC messages extracted.")

    output_path = os.path.join(os.path.dirname(trc_files[0]), "Final_Merge_trc.trc")
    with open(output_path, "w", encoding="utf-8") as f:
        for line in primary_header:
            if line.startswith(";$STARTTIME="):
                f.write(f";$STARTTIME={primary_start_timestamp}\n")
            elif line.strip().startswith(";   Start time:"):
                f.write(f";   Start time: {primary_start_time_str}\n")
            elif line.strip().startswith(";   Generated by"):
                f.write(";   Merged by TRC Tool\n")
            else:
                f.write(line)
        f.write("\n")
        for line in final_lines:
            f.write(line + "\n")

    print(f"\n✅ Merged TRC saved at: {output_path}")
    return output_path


# ---------------------- TRC PARSING & DECODING ---------------------- #
def parse_trc_file(trc_file, dbc):
    signal_names = set()
    decoded_rows = []
    last_known_values = {}
    file_version = None

    with open(trc_file, 'r', encoding='utf-8', errors='ignore') as f:
        lines = f.readlines()

    for line in lines:
        if line.startswith(";$FILEVERSION="):
            file_version = line.split("=")[1].strip()
            break

    for line in tqdm(lines, desc="🔍 Decoding", unit="lines"):
        try:
            if file_version == "1.1":
                match = re.search(
                    r'^\s*\d+\)\s+([\d.]+)\s+(Rx|Tx)\s+([0-9A-Fa-f]+)\s+\d+\s+((?:[0-9A-Fa-f]{2}\s*)+)',
                    line
                )
                if not match:
                    continue
                timestamp = float(match.group(1)) / 1000
                can_id = int(match.group(3), 16)
                data_bytes = bytes(int(b, 16) for b in match.group(4).split())

            elif file_version == "2.0":
                match = re.search(
                    r'^\s*\d+\s+([\d.]+)\s+\S+\s+([0-9A-Fa-f]+)\s+(Rx|Tx)\s+\d+\s+((?:[0-9A-Fa-f]{2}\s*)+)',
                    line
                )
                if not match:
                    continue
                timestamp = float(match.group(1)) / 1000
                can_id = int(match.group(2), 16)
                data_bytes = bytes(int(b, 16) for b in match.group(4).split())
            else:
                print("❌ Unsupported TRC file version.")
                return [], []

            message = dbc.get_message_by_frame_id(can_id)
            if not message:
                continue

            decoded = message.decode(data_bytes)
            signal_names.update(decoded.keys())
            last_known_values.update(decoded)

            row = {"Time (s)": round(timestamp, 6)}
            row.update(last_known_values)
            decoded_rows.append(row)

        except Exception:
            continue

    return decoded_rows, ["Time (s)"] + sorted(signal_names)


def write_large_csv(df, base_path):
    row_limit = 1_000_000
    total_rows = len(df)
    total_parts = math.ceil(total_rows / row_limit)
    paths = []

    print(f"\n💾 Writing decoded data to CSV ({total_parts} part(s))...")
    for i in range(total_parts):
        chunk = df.iloc[i * row_limit: (i + 1) * row_limit]
        suffix = "" if i == 0 else f"_part{i+1}"
        path = f"{base_path}{suffix}.csv"
        chunk.to_csv(path, index=False)
        paths.append(path)
        print(f"✅ Saved: {path}")

    return paths


# ---------------------- REFACTORED TRC TO CSV ---------------------- #
def trc_to_csv(trc_files, dbc_file, output_base_path):
    """
    trc_files: list of paths to TRC files
    dbc_file: path to dbc file
    output_base_path: base path (without extension) for saving CSV output
    """
    try:
        merged_path = merge_in_forced_order(trc_files)
    except Exception as e:
        print(f"❌ Merge failed: {e}")
        return False

    try:
        dbc = cantools.database.load_file(dbc_file)
    except Exception as e:
        print(f"❌ Failed to load DBC: {e}")
        return False

    print("\n🔍 Decoding merged TRC file...")
    rows, columns = parse_trc_file(merged_path, dbc)

    if not rows:
        print("❌ No data decoded.")
        return False

    df = pd.DataFrame(rows)
    df = df.reindex(columns=columns)

    write_large_csv(df, output_base_path)
    return True


# ---------------------- LOG PARSING ---------------------- #
def parse_log_to_compact_csv(log_path, dbc_path, output_csv_path):
    db = cantools.database.load_file(dbc_path)
    message_map = {msg.frame_id: msg for msg in db.messages}

    rows = OrderedDict()  # timestamp -> {signal: value}
    last_known = {}       # signal -> latest value

    with open(log_path, 'r') as f:
        for line in f:
            if not re.match(r"^\d{2}:\d{2}:\d{2}:\d{4}", line.strip()):
                continue
            try:
                parts = line.strip().split()
                timestamp = parts[0]
                can_id = int(parts[3], 16)
                dlc = int(parts[5])
                data = bytes(int(b, 16) for b in parts[6:6 + dlc])

                if can_id not in message_map:
                    continue

                msg = message_map[can_id]
                decoded = msg.decode(data)

                for sig, val in decoded.items():
                    last_known[sig] = val

                snapshot = rows.get(timestamp, last_known.copy())
                snapshot.update(decoded)
                rows[timestamp] = snapshot.copy()

            except Exception:
                continue

    all_signals = sorted(set(sig for snapshot in rows.values() for sig in snapshot))
    headers = ["Timestamp"] + all_signals

    with open(output_csv_path, "w", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=headers)
        writer.writeheader()
        for ts, snapshot in rows.items():
            row = {"Timestamp": ts}
            row.update({sig: snapshot.get(sig, "") for sig in all_signals})
            writer.writerow(row)

    print(f"✅ Final snapshot CSV written to {output_csv_path}")


# ---------------------- MAIN (with multi-select) ---------------------- #
def main():
    Tk().withdraw()  # Hide Tkinter root window

    print("📂 Please select one or more TRC files")
    trc_files = filedialog.askopenfilenames(title="Select TRC files", filetypes=[("TRC files", "*.trc")])
    if not trc_files:
        print("❌ No TRC files selected.")
        return

    print("\n📁 Please select the DBC file")
    dbc_file = filedialog.askopenfilename(title="Select DBC file", filetypes=[("DBC files", "*.dbc")])
    if not dbc_file:
        print("❌ No DBC file selected.")
        return

    # Output base path for CSVs (same dir as first TRC, with suffix)
    base_dir = os.path.dirname(trc_files[0])
    base_name = os.path.splitext(os.path.basename(trc_files[0]))[0]
    output_base_path = os.path.join(base_dir, base_name + "_decoded")

    success = trc_to_csv(trc_files, dbc_file, output_base_path)
    if success:
        print("\n✅ TRC to CSV conversion completed successfully.")
    else:
        print("\n❌ TRC to CSV conversion failed.")


if __name__ == "__main__":
    main()
